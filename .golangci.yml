run:
  tests: true
  skip-dirs:
    - bin
  skip-files:
    - ".*/generated.go"
  ## golang-ci already recognizes autogenerated files automatically.
  # skip-files:
  #   - generated
  skip-dirs-use-default: true

linters-settings:
  # errcheck:
  #   ignore: fmt:.*,[rR]ead|[wW]rite|[cC]lose,io:Copy
  misspell:
    ignore-words:
      - empiricaly
  gocritic:
    enabled-checks:
      - appendAssign
      - argOrder
      - badCall
      - badCond
      - badLock
      - badRegexp
      - builtinShadowDecl
      - caseOrder
      - codegenComment
      - commentedOutCode
      - deprecatedComment
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - evalOrder
      - exitAfterDefer
      - filepathJoin
      - flagDeref
      - flagName
      - mapKey
      - nilValReturn
      - octalLiteral
      - offBy1
      - regexpPattern
      - sloppyReassign
      - sloppyTypeAssert
      - sortSlice
      - sqlQuery
      - truncateCmp
      - unnecessaryDefer
      - weakCond
      - assignOp
      - boolExprSimplify
      - builtinShadow
      - captLocal
      - commentFormatting
      - commentedOutImport
      - defaultCaseOrder
      - deferUnlambda
      - docStub
      - dupImport
      - elseif
      - emptyFallthrough
      - emptyStringTest
      - hexLiteral
      - ifElseChain
      - importShadow
      - initClause
      - methodExprCall
      - nestingReduce
      - newDeref
      - paramTypeCombine
      - ptrToRefParam
      - regexpMust
      - regexpSimplify
      - ruleguard
      - singleCaseSwitch
      - sloppyLen
      - stringXbytes
      - switchTrue
      - typeAssertChain
      - typeDefFirst
      - typeSwitchVar
      - typeUnparen
      - underef
      - unlabelStmt
      - unlambda
      - unnamedResult
      - unnecessaryBlock
      - unslice
      - valSwap
      - whyNoLint
      - wrapperFunc
      - yodaStyleExpr
      - appendCombine
      - equalFold
      - hugeParam
      - indexAlloc
      - rangeExprCopy
      - rangeValCopy
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: true
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # line-length: 160 # 160 is acceptable if needed

linters:
  disable-all: true
  enable:
    - bodyclose
    - cyclop
    - deadcode
    # - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errorlint
    - exhaustive
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - gocritic
    - goconst
    - gocyclo
    - gocognit
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goimports
    # - golint DEPRECATED https://github.com/golangci/golangci-lint/blob/master/CHANGELOG.md#may-2021
    - gomnd
    - gomoddirectives
    - gosec
    - gosimple
    - govet
    - ifshort
    - ineffassign
    - interfacer
    - importas
    - lll
    - maligned
    - makezero
    - misspell
    - nakedret
    - nilerr
    - nlreturn
    - nestif
    - noctx
    - prealloc
    - predeclared
    - promlinter
    - revive
    - staticcheck
    - structcheck
    - tagliatelle
    - thelper
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl

issues:
  # # Independently from option `exclude` we use default exclude patterns,
  # # it can be disabled by this option. To list all
  # # excluded by default patterns execute `golangci-lint run --help`.
  # # Default value for this option is true.
  # exclude-use-default: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  include:
    - EXC0002 # disable excluding of issues about comments from golint

  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - dupl
        - gosec

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # Exclude lll and funlen in resolvers function names
    - path: \.resolvers\.go
      source: "^func \\("
      linters:
        - lll
        - funlen

    # Exclude lll and funlen in resolvers function names
    - path: \.resolvers\.go
      source: "(Query|All|Get|Only)"
      linters:
        - wrapcheck

    # Exclude go critic typeDefFirst in resolvers type definitions
    - path: \.resolvers\.go
      text: "typeDefFirst:"
      linters:
        - gocritic

    # Exclude gofumpt from trimping on multiple resolver type declarations:
    # internal/graph/datum.resolvers.go:41: File is not `gofumpt`-ed (gofumpt)
    # type datumResolver struct{ *Resolver }
    # type mutationResolver struct{ *Resolver }
    # type queryResolver struct{ *Resolver }
    - path: \.resolvers\.go
      source: "type.*?Resolver"
      linters:
        - gofumpt
