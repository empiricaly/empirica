// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package term

import (
	"fmt"
	"strings"
)

const (
	// Log is a updateKind of type Log.
	Log updateKind = iota
	// Logerr is a updateKind of type Logerr.
	Logerr
	// Error is a updateKind of type Error.
	Error
	// Ready is a updateKind of type Ready.
	Ready
	// Restarted is a updateKind of type Restarted.
	Restarted
)

var ErrInvalidupdateKind = fmt.Errorf("not a valid updateKind, try [%s]", strings.Join(_updateKindNames, ", "))

const _updateKindName = "loglogerrerrorreadyrestarted"

var _updateKindNames = []string{
	_updateKindName[0:3],
	_updateKindName[3:9],
	_updateKindName[9:14],
	_updateKindName[14:19],
	_updateKindName[19:28],
}

// updateKindNames returns a list of possible string values of updateKind.
func updateKindNames() []string {
	tmp := make([]string, len(_updateKindNames))
	copy(tmp, _updateKindNames)
	return tmp
}

var _updateKindMap = map[updateKind]string{
	Log:       _updateKindName[0:3],
	Logerr:    _updateKindName[3:9],
	Error:     _updateKindName[9:14],
	Ready:     _updateKindName[14:19],
	Restarted: _updateKindName[19:28],
}

// String implements the Stringer interface.
func (x updateKind) String() string {
	if str, ok := _updateKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("updateKind(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x updateKind) IsValid() bool {
	_, ok := _updateKindMap[x]
	return ok
}

var _updateKindValue = map[string]updateKind{
	_updateKindName[0:3]:                    Log,
	strings.ToLower(_updateKindName[0:3]):   Log,
	_updateKindName[3:9]:                    Logerr,
	strings.ToLower(_updateKindName[3:9]):   Logerr,
	_updateKindName[9:14]:                   Error,
	strings.ToLower(_updateKindName[9:14]):  Error,
	_updateKindName[14:19]:                  Ready,
	strings.ToLower(_updateKindName[14:19]): Ready,
	_updateKindName[19:28]:                  Restarted,
	strings.ToLower(_updateKindName[19:28]): Restarted,
}

// ParseupdateKind attempts to convert a string to a updateKind.
func ParseupdateKind(name string) (updateKind, error) {
	if x, ok := _updateKindValue[name]; ok {
		return x, nil
	}
	return updateKind(0), fmt.Errorf("%s is %w", name, ErrInvalidupdateKind)
}

// MarshalText implements the text marshaller method.
func (x updateKind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *updateKind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseupdateKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
